<?php

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Extension: Logs Management
 *
 * Log managment extension for wsal.
 *
 * @since 4.3.3
 */
class WSAL_LogsManagement {

	public function __construct() {
		add_filter( 'wsal_setting_tabs', array( $this, 'add_logs_management_tab' ), 10, 1 );
		add_filter( 'wp_ajax_wsal_delete_data_from_logs', array( $this, 'delete_data_from_logs' ), 10, 1 );

		// Add scripts.
		add_action( 'admin_init', array( $this, 'setup_logs_management' ) );
	}

	public function is_active() {
		return wsal_freemius()->is_plan_or_trial__premium_only( 'professional' );
	}

	/**
	 * Add scripts and styles for this extenion.
	 *
	 * @return void
	 */
	public function setup_logs_management() {

		// Get current tab.
		$current_tab = filter_input( INPUT_GET, 'tab', FILTER_SANITIZE_STRING );

		if ( 'logs-managment' == $current_tab ) {
			$wsal = WpSecurityAuditLog::GetInstance();
			wp_enqueue_script(
				'logs-management',
				$wsal->GetBaseUrl() . '/extensions/logs-management/js/logs-management.js',
				[],
				WSAL_VERSION,
				true
			);
	
			// Passing nonce for security to JS file.
			$wsal_data = array(
				'wp_nonce' => wp_create_nonce( 'wsal-exclude-nonce' ),
			);
			wp_localize_script( 'logs-management', 'wsal_data', $wsal_data );
			wp_enqueue_style( 'logs-management-style', $wsal->GetBaseUrl() . '/extensions/logs-management/css/style.css' );
		}
	}

	/**
	 * Add log management tab to WSAL settings.
	 *
	 * @param array $wsal_setting_tabs
	 * @return array - Tabs, plus our tab.
	 */
	public function add_logs_management_tab( $wsal_setting_tabs ) {
		$wsal_setting_tabs['logs-managment'] = array(
			'name'     => __( 'Delete activity log data', 'wp-security-audit-log' ),
			'link'     => add_query_arg( 'tab', 'logs-managment' ),
			'render'   => array( $this, 'logs_management_tab' ),
			'save'     => false,
			'priority' => 70,
		);
		return $wsal_setting_tabs;
	}

	/**
	 * Handle content.
	 *
	 * @return void
	 */
	public function logs_management_tab() {
		$this->tab_content();
	}

	/**
	 * The actual settings/tab content.
	 *
	 * @return void
	 */
	private function tab_content() {
		$disabled  = ! $this->is_active() ? 'disabled' : '';
		$admin_url = ! is_multisite() ? 'admin_url' : 'network_admin_url';
		$buy_now   = add_query_arg( 'page', 'wsal-auditlog-pricing', $admin_url( 'admin.php' ) );
		$html_tags = WpSecurityAuditLog::GetInstance()->allowed_html_tags;
		$nonce     = wp_create_nonce( 'wsal-delete-log-data' );

		$tab_info_msg = __( 'All of the below settings can be used to delete data from the activity log. Note that once the data is deleted it cannot be recovered unless you have a backup.', 'wp-security-audit-log' );
		if ( $disabled ) {
			/* Translators: Upgrade now hyperlink. */
			$tab_info_msg = sprintf( esc_html__( 'Logs management is available in the Professional and Business Plans. %s to configure and receive this feature.', 'wp-security-audit-log' ), '<a href="' . $buy_now . '">' . esc_html__( 'Upgrade now', 'wp-security-audit-log' ) . '</a>' );
		}
		?>

		<?php 
		// Show if applicable.
		if ( ! $disabled ) : ?>
		<p class="description"> <?php echo wp_kses( $tab_info_msg, $html_tags ); ?></p>
		<table class="form-table wsal-tab logs-management-settings">
			<tr>
				<th><label><?php esc_html_e( 'Delete activity log data about a specific user', 'wp-security-audit-log' ); ?></label></th>
				<td>
					<fieldset <?php echo esc_attr( $disabled ); ?>>
						<input type="text" id="ExUserQueryBox" style="width: 250px;" placeholder="<?php esc_attr_e( 'Enter username', 'wp-security-audit-log' ); ?>"> <input type="button" id="delete-user-log-data" class="button-primary" value="Delete user data" data-delete-log-data-input="#ExUserQueryBox" data-delete-log-data-type="user" data-nonce="<?php echo esc_attr( $nonce  ); ?>">
						<p class="description">
							<?php esc_html_e( 'Specify the user\'s username above and click delete data to delete all the events in the activity log that either have been generated by this user, or this user is referenced in.', 'wp-security-audit-log' ); ?>
						</p>
					</fieldset>
				</td>
			</tr>

			<tr>
				<th><label><?php esc_html_e( 'Delete activity log data about a specific IP address', 'wp-security-audit-log' ); ?></label></th>
				<td>
					<fieldset <?php echo esc_attr( $disabled ); ?>>
						<input type="text" id="IpAddrQueryBox" style="width: 250px;" placeholder="<?php esc_attr_e( 'Enter IP', 'wp-security-audit-log' ); ?>"> <input type="button" id="delete-ip-log-data" class="button-primary" value="Delete IP address data" data-delete-log-data-input="#IpAddrQueryBox" data-delete-log-data-type="ip" data-nonce="<?php echo esc_attr( $nonce  ); ?>">
						<p class="description">
							<?php esc_html_e( 'Specify the IP address above and click delete data to delete all the events in the activity log that either have been generated from this IP address or the IP address is referenced in it.', 'wp-security-audit-log' ); ?>
						</p>
					</fieldset>
				</td>
			</tr>

			<tr>
				<th><label><?php esc_html_e( 'Delete activity log data with a specific severity level', 'wp-security-audit-log' ); ?></label></th>
				<td>
					<fieldset <?php echo esc_attr( $disabled ); ?>>
						<input type="text" id="SeveritiesQueryBox" style="width: 250px;" placeholder="<?php esc_attr_e( 'Enter severity', 'wp-security-audit-log' ); ?>"> <input type="button" id="delete-severity-data" class="button-primary" value="Delete Severity data" data-delete-log-data-input="#SeveritiesQueryBox" data-delete-log-data-type="severity" data-nonce="<?php echo esc_attr( $nonce  ); ?>">							
						<p class="description">
							<?php esc_html_e( 'Specify the severity level above and click delete data to delete all the events in the activity log of that severity level.', 'wp-security-audit-log' ); ?>
						</p>				
					</fieldset>
				</td>
			</tr>

			<tr>
				<th><label><?php esc_html_e( 'Delete activity log data about a specific event type', 'wp-security-audit-log' ); ?></label></th>
				<td>
					<fieldset <?php echo esc_attr( $disabled ); ?>>
						<input type="text" id="EventTypeQueryBox" style="width: 250px;" placeholder="<?php esc_attr_e( 'Enter event type', 'wp-security-audit-log' ); ?>"> <input type="button" id="delete-event-type-data" class="button-primary" value="Delete event type data" data-delete-log-data-input="#EventTypeQueryBox" data-delete-log-data-type="event_type" data-nonce="<?php echo esc_attr( $nonce  ); ?>">
						<p class="description">
							<?php esc_html_e( 'Specify the event type above and click delete data to delete all the events in the activity log of the specified event type.', 'wp-security-audit-log' ); ?>
						</p>
					</fieldset>
				</td>
			</tr>

			<tr>
				<th><label><?php esc_html_e( 'Delete activity log data about a specific object', 'wp-security-audit-log' ); ?></label></th>
				<td>
					<fieldset <?php echo esc_attr( $disabled ); ?>>
						<input type="text" id="ObjectTypeQueryBox" style="width: 250px;" placeholder="<?php esc_attr_e( 'Enter object', 'wp-security-audit-log' ); ?>"> <input type="button" id="delete-object-data" class="button-primary" value="Delete object data" data-delete-log-data-input="#ObjectTypeQueryBox" data-delete-log-data-type="object" data-nonce="<?php echo esc_attr( $nonce  ); ?>">
						<p class="description">
							<?php esc_html_e( 'Specify the object above and click delete data to delete all the events in the activity log with the specific object.', 'wp-security-audit-log' ); ?>
						</p>
					</fieldset>
				</td>
			</tr>

			<tr>
				<th><label><?php esc_html_e( 'Delete activity log data about a specific event ID', 'wp-security-audit-log' ); ?></label></th>
				<td>
					<fieldset <?php echo esc_attr( $disabled ); ?>>
						<input type="text" id="EventIDQueryBox" style="width: 250px;" placeholder="<?php esc_attr_e( 'Enter event ID', 'wp-security-audit-log' ); ?>"> <input type="button" id="delete-event-id-data" class="button-primary" value="Delete event IDs data" data-delete-log-data-input="#EventIDQueryBox" data-delete-log-data-type="event_id" data-nonce="<?php echo esc_attr( $nonce  ); ?>">
						<p class="description">
							<?php esc_html_e( 'Specify the event ID above and click delete data to delete all the events in the activity log of that type.', 'wp-security-audit-log' ); ?>
						</p>
					</fieldset>
				</td>
			</tr>
			
		</table>
		<?php
		endif;
	}

	/**
	 * Simple function to remove log entries based on a specified criteria.
	 *
	 * @return string $message - Confirmation of success or failure.
	 */
	public function delete_data_from_logs() {
		$wsal = WpSecurityAuditLog::GetInstance();

		// Grab POSTed data.
		$nonce           = filter_input( INPUT_POST, 'nonce', FILTER_SANITIZE_STRING );
		$type            = filter_input( INPUT_POST, 'type', FILTER_SANITIZE_STRING );
		$item_to_remove  = filter_input( INPUT_POST, 'item_to_remove', FILTER_SANITIZE_STRING );

		// Check nonce.
		if ( empty( $nonce ) || ! wp_verify_nonce( $nonce, 'wsal-delete-log-data' ) ) {
			wp_send_json_error( esc_html__( 'Nonce Verification Failed.', 'wp-security-audit-log' ) );
		}

		// We might populate this later.
		$delete_lines  = [];
		$prepared_query = '';

		// Gather correct table names.
		$occ_table  = $wsal->getConnector()->getAdapter( 'Occurrence' )->GetTable();
		$meta_table = $wsal->getConnector()->getAdapter( 'Meta' )->GetTable();

		// Types we dont need special treatment for.
		$names = [
			'ip'         => 'ClientIP',
			'severity'   => 'Severity',
			'object'     => 'Object',
			'event_type' => 'EventType',
		];

		global $wpdb;

		// Build query based on selected type.
		if ( 'user' == $type ) {
			$user         = get_user_by( 'login', $item_to_remove );
			// Bail if we still dont have a user by this point.
			if ( ! $user instanceof WP_User ) {
				$message = esc_html__( 'User not found.', 'wp-security-audit-log' );
				wp_send_json_error( $message );
			}
			$prepared_query	= $wpdb->prepare(
				"DELETE occ, meta FROM $occ_table as occ INNER JOIN $meta_table AS meta on occ.id = meta.occurrence_id WHERE meta.name = 'Username' AND meta.value = %s OR meta.name = 'CurrentUserID' AND meta.value = %d;",
				$item_to_remove,
				$user->ID
			);
		} else if ( 'event_id' == $type ) {
			$prepared_query	= $wpdb->prepare(
				"DELETE occ, meta FROM $occ_table as occ INNER JOIN $meta_table AS meta on occ.id = meta.occurrence_id WHERE occ.alert_id = %s",
				$item_to_remove
			);
		} else if ( isset( $names[ $type ] ) ) {
			$prepared_query	= $wpdb->prepare(
				"DELETE occ, meta FROM $occ_table as occ INNER JOIN $meta_table AS meta on occ.id = meta.occurrence_id WHERE meta.name = %s AND meta.value = %s",
				$names[ $type ],
				$item_to_remove
			);
		}

		// Run the query.
		$delete_lines = ( ! empty( $prepared_query ) ) ? $wpdb->query( $prepared_query ) : [];

		// Report back.
		if ( ! empty( $delete_lines  ) ) {
			$message = ucwords( str_replace( '_', ' ',  $type ) ) . ' ' . esc_html__( 'data deleted.', 'wp-security-audit-log' ) . ' ' . $delete_lines  .esc_html__( ' rows removed', 'wp-security-audit-log' ) ;

			// Trigger alert.
			$alert_data = [];

			if ( 'user' == $type ) {
				$user_data               = get_userdata( $user->ID );
				$alert_data['user']      = $item_to_remove;
				$alert_data['Role']      = is_array( $user_data->roles ) ? implode( ', ', $user_data->roles ) : $user_data->roles;
				$alert_data['FirstName'] = ( empty( $user_data->first_name ) ) ? esc_html__( 'Not provided', 'wp-security-audit-log' ) : $user_data->first_name;
				$alert_data['LastName']  = ( empty( $user_data->last_name ) ) ? esc_html__( 'Not provided', 'wp-security-audit-log' ) : $user_data->last_name;
				$wsal->alerts->Trigger( 6038, $alert_data );
			} else {
				// Little tidy up for show.
				$alert_data['deleted_data_type'] = ucwords( str_replace( 'Ip', 'IP',  str_replace( '_', ' ',  $type ) ) );
				$alert_data['deleted_data']      = $item_to_remove;
				$wsal->alerts->Trigger( 6039, $alert_data );
			}

			wp_send_json_success( $message );
		} else {
			$message = esc_html__( 'No events found.', 'wp-security-audit-log' );
			wp_send_json_error( $message );
		}
	}
}
